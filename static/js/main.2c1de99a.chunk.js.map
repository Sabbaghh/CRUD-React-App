{"version":3,"sources":["Component/CourseForm/CourseForm.js","Component/ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","ChangeTempCourseName","AddItem","value","onSubmit","className","type","onChange","placeholder","ItemList","state","TrueOrFalse","Items","Toggle","e","setState","ListReturn","activeClass","activeClassAndCheck","onClick","shiftItems","ElmIndex","Course","Delete","Update","preventDefault","EditItems","input1","formReturn","defaultValue","ref","v","this","Component","App","CourseName","tempCourseName","target","NewList","unshift","index","splice","eValue","ModifiedCourses","Item","push","console","log","listItems","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c1de99a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CourseForm = (props) => { \r\n    const {ChangeTempCourseName,AddItem,value} = props;\r\n    return(\r\n        <form onSubmit={AddItem} className=\"CourseForm\">\r\n            <input type =\"text\" onChange={ChangeTempCourseName} value={value} placeholder=\"What do you have for today?\" />\r\n            <button type=\"submit\" > <span><i className=\"fas fa-angle-double-right\"></i></span> </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CourseForm;","import React, { Fragment, Component } from 'react';\r\n\r\nclass ItemList extends Component {\r\n\r\n    state = {\r\n        TrueOrFalse: false,\r\n        Items:[]\r\n    }\r\n\r\n    Toggle = (e) => {\r\n        let TrueOrFalse = this.state.TrueOrFalse ? false : true;\r\n        this.setState({\r\n            TrueOrFalse\r\n        })\r\n    }\r\n\r\n    \r\n    ListReturn = () => {\r\n        let activeClass = this.props.activeClass;\r\n        let activeClassAndCheck = `check ${activeClass}`; \r\n        return (\r\n            <Fragment>\r\n                <li>\r\n                        <button className={activeClassAndCheck} onClick={()=>this.props.shiftItems(this.props.ElmIndex)} > <span><i className=\"fas fa-check\"></i></span> </button>\r\n                        <div className ={activeClass}><span>{this.props.Course}</span></div>\r\n                        <button onClick={this.Toggle} className=\"Edit\"> <span>Edit</span> </button>\r\n                        <button onClick={() => this.props.Delete(this.props.ElmIndex)}> <span><i className=\"fas fa-trash\"></i></span></button>\r\n                </li>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    //updateValue \r\n    Update = (e) => { \r\n        e.preventDefault();\r\n        this.props.EditItems(this.input1.value,this.props.ElmIndex)\r\n        this.Toggle();\r\n    }\r\n\r\n    formReturn = () => {\r\n        return (\r\n            <Fragment>\r\n                <form onSubmit={this.Update}>\r\n                    <input type=\"text\" defaultValue={this.props.Course} ref={(v)=> this.input1 =v}/>\r\n                    <button type=\"submit\"> <span>Update</span> </button>\r\n                </form>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {this.state.TrueOrFalse ? this.formReturn() : this.ListReturn()}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ItemList;","import React, { Component } from 'react';\nimport CourseForm from './Component/CourseForm/CourseForm';\nimport ItemList from './Component/ItemList/ItemList';\n\n\nclass App extends Component {\n\n  state = {\n    Items: [{ CourseName: \"JavaScript\",activeClass:\"\" },\n    { CourseName: \"c++\",activeClass:\"\" },\n    { CourseName: \"HTML\",activeClass:\"\"}],\n    tempCourseName: \"\",\n  }\n\n  //chaning the temp\n  ChangeTempCourseName = (e) => {\n    let value = e.target.value; //getting the value from text box and store it into variable\n    this.setState({\n      tempCourseName: value\n    }) // changing the tempCourseName into the variable\n  }\n\n\n  // adding new items\n  AddItem = (e) => {\n    e.preventDefault();\n\n    if (this.state.tempCourseName !== \"\") {\n      let value = this.state.tempCourseName; //getting the tempcourseName\n      let NewList = this.state.Items; // creating an obj from obj we have \n      NewList.unshift({ CourseName: value, activeClass:\"\" }); //push the TempCouseName\n      this.setState({\n        Items: NewList,\n        tempCourseName: \"\"\n      }) //update state with the new object that we have created\n    }\n  }\n\n  //delete items \n\n  Delete = (index) => {\n    let value = [...this.state.Items];\n    value.splice(index, 1);\n    this.setState({\n      Items: value\n    })\n  }\n\n  //editItem \n\n  EditItems = (eValue, index) => {\n    let ModifiedCourses = this.state.Items;\n    let course = ModifiedCourses[index];\n    course[\"CourseName\"] = eValue;\n    this.setState({\n      Items: ModifiedCourses\n    })\n  }\n\n  //shift Items \n  shiftItems = (index) => { \n    let Items = this.state.Items;\n    let Item = Items[index];\n    let activeClass =Item.activeClass;\n    activeClass = activeClass===\"active\" ? Item.activeClass=\"\" : Item.activeClass=\"active\";\n    Items.splice(index,1);\n    Items.push(Item);\n    this.setState({ \n      Items\n    })\n    console.log(Items);\n\n  }\n\n  \n\n\n\n//rendering\n\n  render() {\n\n    let Items = this.state.Items;\n    let listItems = this.state.Items.map((Course, index) => {\n      console.log(Course.activeClass)\n      return (\n        <ItemList Course={Course.CourseName} activeClass={Course.activeClass}\n         key={index} Delete={this.Delete} ElmIndex={index} EditItems={this.EditItems} shiftItems={this.shiftItems} \n         />\n      )\n    })\n\n\n    return (\n      <div className=\"App\">\n        <h2 > <span>Today</span> </h2>\n        <CourseForm Items = {this.state.Items}ChangeTempCourseName={this.ChangeTempCourseName} AddItem={this.AddItem} value={this.state.tempCourseName} />\n        <div className=\"ItemList\">\n          <ul>\n              {listItems}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}